n = n()
)
data %>%
mutate(
type = as.factor(ifelse(eruptions > 4, "long", "short")),
) %>%
group_by(type) %>%
summarise(
n = n()
)
mixture_models <- data.frame(
j = c(1, 2),
prior_b_mu = c(0, 0, 0.45, 0.45),
prior_b_sigma = c(1, 10, 1, 10),
prior_weight = c(0.25, 0.25, 0.25, 0.25)
)
d <- list(
N = nrow(df),
condition = d$condition,
adjP10 = d$adjP10
)
mixture_models %<>%
nest(-j) %>%
mutate(
fit = map(data, ~ sampling(
stan_model,
data = compose_data(as.list(.), d),
iter = 5000,
warmup = 500,
chain = 2,
cores = 2
))) %>%
unnest(data) %>%
mutate(
bs = map(fit, bridge_sampler, silent = TRUE),
log_C = unlist(map(bs, "logml"))
)
df <- read.csv("posture-master/data/exp2.csv")
d <- df %>%
mutate(condition = as.numeric(condition == "expansive")) %>%
select(adjP10, condition)
mixture_models <- data.frame(
j = c(1, 2),
prior_b_mu = c(0, 0, 0.45, 0.45),
prior_b_sigma = c(1, 10, 1, 10),
prior_weight = c(0.25, 0.25, 0.25, 0.25)
)
d <- list(
N = nrow(df),
condition = d$condition,
adjP10 = d$adjP10
)
mixture_models %<>%
nest(-j) %>%
mutate(
fit = map(data, ~ sampling(
stan_model,
data = compose_data(as.list(.), d),
iter = 5000,
warmup = 500,
chain = 2,
cores = 2
))) %>%
unnest(data) %>%
mutate(
bs = map(fit, bridge_sampler, silent = TRUE),
log_C = unlist(map(bs, "logml"))
)
mixture_models %>%
nest(-j)
mixture_models %>%
nest(-j) %>%
mutate(
fit = map(data, ~ sampling(
stan_model,
data = compose_data(as.list(.), d),
iter = 5000,
warmup = 500,
chain = 2,
cores = 2
)))
mixture_models <- data.frame(
j = c(1, 2),
prior_b_mu = c(0, 0, 0.45, 0.45),
prior_b_sigma = c(1, 10, 1, 10),
prior_weight = c(0.25, 0.25, 0.25, 0.25)
)
d <- df %>%
mutate(condition = as.numeric(condition == "expansive")) %>%
select(adjP10, condition)
d
df <- read.csv("posture-master/data/exp2.csv")
d <- list(
N = nrow(df),
condition = d$condition,
adjP10 = d$adjP10
)
d
mixture_models
mixture_models <- data.frame(
prior_b_mu = c(0, 0, 0.45, 0.45),
prior_b_sigma = c(1, 10, 1, 10),
prior_weight = c(0.25, 0.25, 0.25, 0.25)
) %>%
mutate(
j = seq.int(nrow(.))
)
mixture_models
d <- list(
N = nrow(df),
condition = d$condition,
adjP10 = d$adjP10
)
mixture_models %>%
nest(-j) %>%
mutate(
fit = map(data, ~ sampling(
stan_model,
data = compose_data(as.list(.), d),
iter = 5000,
warmup = 500,
chain = 2,
cores = 2
))) %>%
unnest(data) %>%
mutate(
bs = map(fit, bridge_sampler, silent = TRUE),
log_C = unlist(map(bs, "logml"))
)
mixture_models %<>%
nest(-j) %>%
mutate(
fit = map(data, ~ sampling(
stan_model,
data = compose_data(as.list(.), d),
iter = 5000,
warmup = 500,
chain = 2,
cores = 2
))) %>%
unnest(data) %>%
mutate(
bs = map(fit, bridge_sampler, silent = TRUE),
log_C = unlist(map(bs, "logml"))
)
models <- mixture_models %>%
mutate(
j = as.factor(j),
b = map(fit, spread_draws, b)
) %>%
unnest(b) %>%
select(j, b)
mixture_models %>%
mutate(
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior = map(fit, spread_draws, b)
) %>%
unnest(posterior) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = b)) +
geom_density(data = models, aes(b, color = j)) +
stat_density(kernel = "epanechnikov", bw = 0.5, fill = "gray75", alpha = 0.8)
mixture_priors <- data.frame(
prior_b_mu = c(0, 0, 0.45, 0.45),
prior_b_sigma = c(1, 10, 1, 10),
prior_weight = c(0.25, 0.25, 0.25, 0.25)
) %>%
mutate(
j = seq.int(nrow(.))
)
mixture_priors
mixture_models %>%
mutate(
j = as.factor(j),
b = map(fit, spread_draws, b)
) %>%
unnest(b)
mixture_models %>%
mutate(
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior = map(fit, spread_draws, b)
) %>%
unnest(posterior) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight)
mixture_models %>%
mutate(
j = as.factor(j),
estimate = map(fit, spread_draws, b)
) %>%
unnest(estimate)
mixture_models %>%
mutate(
j = as.factor(j),
estimate = map(fit, spread_draws, b)
) %>%
unnest(estimate) %>%
rename( "estimate" = "b" ) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
mixture_priors <- data.frame(
prior_mu = c(0, 0, 0.45, 0.45),
prior_sigma = c(1, 10, 1, 10),
prior_weight = c(0.25, 0.25, 0.25, 0.25)
) %>%
mutate(
j = seq.int(nrow(.))
)
d <- list(
N = nrow(df),
condition = d$condition,
adjP10 = d$adjP10
)
mixture_models <- mixture_priors %>%
nest(-j) %>%
mutate(
fit = map(data, ~ sampling(
stan_model,
data = compose_data(as.list(.), d),
iter = 5000,
warmup = 500,
chain = 2,
cores = 2
))) %>%
unnest(data) %>%
mutate(
bs = map(fit, bridge_sampler, silent = TRUE),
log_C = unlist(map(bs, "logml"))
)
mixture_priors <- data.frame(
prior_mu = c(0, 0, 0.45, 0.45),
prior_sigma = c(1, 10, 1, 10),
prior_weight = c(0.25, 0.25, 0.25, 0.25)
) %>%
mutate(
j = seq.int(nrow(.))
)
d <- list(
N = nrow(df),
condition = d$condition,
adjP10 = d$adjP10
)
mixture_models <- mixture_priors %>%
nest(-j) %>%
mutate(
fit = map(data, ~ sampling(
stan_model,
data = compose_data(as.list(.), d),
iter = 5000,
warmup = 500,
chain = 2,
cores = 2
))) %>%
unnest(data) %>%
mutate(
bs = map(fit, bridge_sampler, silent = TRUE),
log_C = unlist(map(bs, "logml"))
)
mixture_models %>%
mutate(
j = as.factor(j),
estimate = map(fit, spread_draws, b)
) %>%
unnest(estimate) %>%
rename( "estimate" = "b" ) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
models <- mixture_models %>%
mutate(
j = as.factor(j),
estimate = map(fit, spread_draws, b)
) %>%
unnest(estimate) %>%
rename( "estimate" = "b" ) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
model_estimates <- mixture_models %>%
mutate(
j = as.factor(j),
estimate = map(fit, spread_draws, b)
) %>%
unnest(estimate) %>%
rename( "estimate" = "b" ) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
write_csv(model_estimates, "posterior_estimates.csv")
model_estimates
write_csv(model_estimates, "posterior_estimates.csv")
mixture_models %>%
mutate(
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior = map(fit, spread_draws, b)
) %>%
unnest(posterior) %>%
rename( "estimate" = "b" ) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = model_estimates, aes(estimate, color = j)) +
stat_density(kernel = "epanechnikov", bw = 0.5, fill = "gray75", alpha = 0.8)
?write_csv
mixture_models %>%
mutate(
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior = map(fit, spread_draws, b)
) %>%
unnest(posterior) %>%
rename( "estimate" = "b" ) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = model_estimates, aes(estimate, color = j)) +
stat_density(kernel = "epanechnikov", bw = 0.5, fill = "gray75", alpha = 0.8)
mixture_models %>%
mutate(
j = as.factor(j),
estimate = map(fit, spread_draws, b)
) %>%
unnest(estimate) %>%
rename( "estimate" = "b" )
mixture_models %>%
mutate(
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior = map(fit, spread_draws, b)
) %>%
unnest(posterior) %>%
rename( "estimate" = "b" ) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = model_estimates, aes(estimate, color = j)) +
stat_density(kernel = "epanechnikov", bw = 0.5, fill = "gray75", alpha = 0.8)
library(rstan)
library(bridgesampling)
#library(rethinking)
library(tidybayes)
library(tidyverse)
library(magrittr)
library(matrixStats)
library(modelr)
library(broom)
library(shiny)
df <- read.csv("posture-master/data/exp2.csv")
mixture_priors <- data.frame(
prior_mu = c(0, 0, 0.45, 0.45),
prior_sigma = c(1, 10, 1, 10),
prior_weight = c(0.25, 0.25, 0.25, 0.25)
) %>%
mutate(
j = seq.int(nrow(.))
)
d <- list(
N = nrow(df),
condition = d$condition,
adjP10 = d$adjP10
)
model_estimates <- mixture_models %>%
mutate(
j = as.factor(j),
estimate = map(fit, spread_draws, b)
) %>%
unnest(estimate) %>%
rename( "estimate" = "b" ) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
model_estimates <- mixture_models %>%
mutate(
j = as.factor(j),
estimate = map(fit, spread_draws, b)
) %>%
unnest(estimate) %>%
rename( "estimate" = "b" ) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
mixture_models
d <- list(
N = nrow(df),
condition = d$condition,
adjP10 = d$adjP10
)
df
d <- list(
N = nrow(df),
condition = df$condition,
adjP10 = df$adjP10
)
mixture_models <- mixture_priors %>%
nest(-j) %>%
mutate(
fit = map(data, ~ sampling(
stan_model,
data = compose_data(as.list(.), d),
iter = 5000,
warmup = 500,
chain = 2,
cores = 2
))) %>%
unnest(data) %>%
mutate(
bs = map(fit, bridge_sampler, silent = TRUE),
log_C = unlist(map(bs, "logml"))
)
model_estimates <- mixture_models %>%
mutate(
j = as.factor(j),
estimate = map(fit, spread_draws, b)
) %>%
unnest(estimate) %>%
rename( "estimate" = "b" ) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
#write_csv(model_estimates, "posterior_estimates.csv")
mixture_models %>%
mutate(
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior = map(fit, spread_draws, b)
) %>%
unnest(posterior) %>%
rename( "estimate" = "b" ) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = model_estimates, aes(estimate, fill = j), alpha = 0.5) +
stat_density(kernel = "epanechnikov", bw = 0.5, fill = "gray75", alpha = 0.8)
mixture_models %>%
mutate(
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior = map(fit, spread_draws, b)
) %>%
unnest(posterior) %>%
rename( "estimate" = "b" ) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = model_estimates, aes(estimate, stroke = j)) +
stat_density(kernel = "epanechnikov", bw = 0.5, fill = "gray75", alpha = 0.8)
mixture_models %>%
mutate(
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior = map(fit, spread_draws, b)
) %>%
unnest(posterior) %>%
rename( "estimate" = "b" ) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = model_estimates, aes(estimate, color = j)) +
stat_density(kernel = "epanechnikov", bw = 0.5, fill = "gray75", alpha = 0.8)
ui_norm <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("weight", "Weight assigned to Model 1",
min = 0, max = 1, value = 0.5
)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server_norm <- function(input, output) {
output$distPlot <- renderPlot({
models <- mixture_models %>%
mutate(
j = as.factor(j),
b = map(fit, spread_samples, b)
) %>%
unnest(b) %>%
select(j, b)
mixture_models %>%
mutate(prior_weight = c(input$weight, (1 - input$weight))) %>%
mutate(
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior = map(fit, spread_samples, b)
) %>%
unnest(posterior) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = b)) +
stat_density(fill = "gray75") +
geom_density(data = models, aes(b, color = j)) +
geom_density(fill = "gray75", alpha = 0.7)
})
}
shinyApp(ui_norm, server_norm)
ui_norm <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("weight.width", "Weight assigned to between narrow and wide priors",
min = 0, max = 1, value = 0.5
),
sliderInput("weight.belief", "Weight assigned to between skeptical and optimistic priors",
min = 0, max = 1, value = 0.5
)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server_norm <- function(input, output) {
output$distPlot <- renderPlot({
models <- mixture_models %>%
mutate(
j = as.factor(j),
b = map(fit, spread_samples, b)
) %>%
unnest(b) %>%
select(j, b)
mixture_models %>%
mutate(prior_weight = c(((1 - input$weight.width) * (1 - input$weight.belief)),
(input$weight.width * (1 - input$weight.belief)),
((1 - input$weight.width) * input$weight.belief),
(input$weight.width * input$weight.belief)) ) %>%
mutate(
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior = map(fit, spread_samples, b)
) %>%
unnest(posterior) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = b)) +
stat_density(fill = "gray75") +
geom_density(data = models, aes(b, color = j)) +
geom_density(fill = "gray75", alpha = 0.7)
})
}
shinyApp(ui_norm, server_norm)
