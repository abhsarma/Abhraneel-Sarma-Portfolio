)
d.BEST <- list(
N = nrow(df),
condition = ifelse(df$condition),
y = df$change
)
d.BEST <- list(
N = nrow(df),
condition = ifelse(df$condition == "expansive"),
y = df$change
)
d.BEST <- list(
N = nrow(df),
condition = df$condition == "expansive",
y = df$change
)
View(d.BEST)
View(df)
d.BEST <- list(
N = nrow(df),
condition = as.integer(df$condition)
y = df$change
d.BEST <- list(
N = nrow(df),
condition = as.integer(df$condition),
y = df$change
)
View(d.BEST)
mixture.BEST <- d %>%
fitted_single_models(bayes_est_model, mixture_priors)
mixture.BEST <- d.BEST %>%
fitted_single_models(bayes_est_model, mixture_priors)
estimates.BEST <- mixture.BEST %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = b
) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
mixture.BEST %>%
mutate(
prior_weight = c(0.25, 0.25, 0.25, 0.25), # change the weights here
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = b
) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = model_estimates_BEST, aes(estimate, color = j)) +
stat_density(fill = "gray75", alpha = 0.8)
mixture.BEST %>%
mutate(
prior_weight = c(0.25, 0.25, 0.25, 0.25), # change the weights here
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = b
) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = estimates.BEST, aes(estimate, color = j)) +
stat_density(fill = "gray75", alpha = 0.8)
d.multilevel <- list(
N = nrow(df),
N_condition = as.integer(length(unique(df$condition))),
condition = as.integer(ifelse(df$condition)),
y = df$change
)
d.multilevel <- list(
N = nrow(df),
N_condition = as.integer(length(unique(df$condition))),
condition = as.integer(ifelse(df$condition, 1, 2)),
y = df$change
)
mixture.multilevel <- d.multilevel %>%
fitted_single_models(bayes_est_multilevel_model, mixture_priors)
mixture_priors <- data.frame(
prior_mu = c(0, 5, 0, 5),
prior_sigma = c(4, 4, 20, 20),
prior_weight = c(0.25, 0.25, 0.25, 0.25)
) %>%
mutate(
j = seq.int(nrow(.))
)
model.multilevel <- mixture.multilevel %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = `a[1]` - `a[2]`
) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
mixture.multilevel %>%
mutate(
prior_weight = c(0.25, 0.25, 0.25, 0.25), # change the weights here
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = `a[1]` - `a[2]`
) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = model.multilevel, aes(estimate, color = j)) +
stat_density(fill = "gray75", alpha = 0.8)
model.multilevel <- mixture.multilevel %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = `a[1]` - `a0`
) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
mixture.multilevel %>%
mutate(
prior_weight = c(0.25, 0.25, 0.25, 0.25), # change the weights here
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = `a[1]` - `a0`
) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = model.multilevel, aes(estimate, color = j)) +
stat_density(fill = "gray75", alpha = 0.8)
model.multilevel <- mixture.multilevel %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
summarise(
mean.a0 = mean(`a0`),
sd.a0 = sd(`a0`),
mean.a1 = mean(`a[1]`),
sd.a1 = sd(`a[1]`),
mean.a2 = mean(`a[2]`),
sd.a2 = sd(`a[2]`)
)
mixture.multilevel %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
summarise(
mean.a0 = mean(`a0`),
sd.a0 = sd(`a0`),
mean.a1 = mean(`a[1]`),
sd.a1 = sd(`a[1]`),
mean.a2 = mean(`a[2]`),
sd.a2 = sd(`a[2]`)
)
mixture.multilevel %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates)
mixture.BEST %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates)
estimates.BEST <- mixture.BEST %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = b
) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
mixture.BEST %>%
mutate(
prior_weight = c(0.25, 0.25, 0.25, 0.25), # change the weights here
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = b
) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = estimates.BEST, aes(estimate, color = j)) +
stat_density(fill = "gray75", alpha = 0.8)
mixture.multilevel %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
summarise(
mean.a0 = mean(`a0`),
sd.a0 = sd(`a0`),
mean.a1 = mean(`a[1]`),
sd.a1 = sd(`a[1]`),
mean.a2 = mean(`a[2]`),
sd.a2 = sd(`a[2]`)
)
View(df)
d.multilevel <- list(
N = nrow(df),
N_condition = as.integer(length(unique(df$condition))),
condition = as.integer(ifelse(df$condition, 1, 2)),
y = df$adjPDiff
)
mixture.multilevel <- d.multilevel %>%
fitted_single_models(bayes_est_multilevel_model, mixture_priors)
mixture.multilevel %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
summarise(
mean.a0 = mean(`a0`),
sd.a0 = sd(`a0`),
mean.a1 = mean(`a[1]`),
sd.a1 = sd(`a[1]`),
mean.a2 = mean(`a[2]`),
sd.a2 = sd(`a[2]`)
)
model.multilevel <- mixture.multilevel %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = `a[1]` - `a[2]`
) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
mixture.multilevel %>%
mutate(
prior_weight = c(0.25, 0.25, 0.25, 0.25), # change the weights here
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = `a[1]` - `a[2]`
) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = model.multilevel, aes(estimate, color = j)) +
stat_density(fill = "gray75", alpha = 0.8)
d.BEST <- list(
N = nrow(df),
condition = as.integer(df$condition),
y = df$change
)
d.multilevel <- list(
N = nrow(df),
N_condition = as.integer(length(unique(df$condition))),
condition = as.integer(ifelse(df$condition, 1, 2)),
y = df$orig
)
mixture.multilevel <- d.multilevel %>%
fitted_single_models(bayes_est_multilevel_model, mixture_priors)
mixture.multilevel %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
summarise(
mean.a0 = mean(`a0`),
sd.a0 = sd(`a0`),
mean.a1 = mean(`a[1]`),
sd.a1 = sd(`a[1]`),
mean.a2 = mean(`a[2]`),
sd.a2 = sd(`a[2]`)
)
mixture.multilevel %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
summarise(
mean.a0 = mean(`a0`),
sd.a0 = sd(`a0`),
mean.a1 = mean(`a[1]`),
sd.a1 = sd(`a[1]`),
mean.a2 = mean(`a[2]`),
sd.a2 = sd(`a[2]`)
)
model.multilevel <- mixture.multilevel %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = `a[1]` - `a[2]`
) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
mixture.multilevel %>%
mutate(
prior_weight = c(0.25, 0.25, 0.25, 0.25), # change the weights here
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = `a[1]` - `a[2]`
) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = model.multilevel, aes(estimate, color = j)) +
stat_density(fill = "gray75", alpha = 0.8)
d.BEST <- list(
N = nrow(df),
condition = as.integer(df$condition),
y = df$orig,
y_bar = mean(df$orig)
)
View(d.BEST)
library(rstan)
library(bridgesampling)
#library(rethinking)
library(tidybayes)
library(tidyverse)
library(magrittr)
library(matrixStats)
library(modelr)
library(broom)
library(shiny)
library(sm)
df <- read.csv("posture-master/data/exp2.csv")
df %<>%
mutate(condition = condition == 'expansive')
d.BEST <- list(
N = nrow(df),
condition = as.integer(df$condition),
y = df$orig,
y_bar = mean(df$orig)
)
mixture.BEST <- d.BEST %>%
fitted_single_models(bayes_est_model, mixture_priors)
estimates.BEST <- mixture.BEST %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = b
) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
mixture.BEST %>%
mutate(
prior_weight = c(0.25, 0.25, 0.25, 0.25), # change the weights here
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = b
) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = estimates.BEST, aes(estimate, color = j)) +
stat_density(fill = "gray75", alpha = 0.8)
d.multilevel <- list(
N = nrow(df),
N_condition = as.integer(length(unique(df$condition))),
condition = as.integer(ifelse(df$condition, 1, 2)),
y = df$orig
)
mixture.multilevel <- d.multilevel %>%
fitted_single_models(bayes_est_multilevel_model, mixture_priors)
d.multilevel <- list(
N = nrow(df),
N_condition = as.integer(length(unique(df$condition))),
condition = as.integer(ifelse(df$condition, 1, 2)),
y = df$orig,
y_bar = mean(y)
)
d.multilevel <- list(
N = nrow(df),
N_condition = as.integer(length(unique(df$condition))),
condition = as.integer(ifelse(df$condition, 1, 2)),
y = df$orig,
y_bar = mean(df$orig)
)
mixture.multilevel <- d.multilevel %>%
fitted_single_models(bayes_est_multilevel_model, mixture_priors)
mixture.multilevel %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
summarise(
mean.a0 = mean(`a0`),
sd.a0 = sd(`a0`),
mean.a1 = mean(`a[1]`),
sd.a1 = sd(`a[1]`),
mean.a2 = mean(`a[2]`),
sd.a2 = sd(`a[2]`)
)
estimates.multilevel <- mixture.multilevel %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = `a[1]` - `a[2]`
) %>%
select(j, prior_mu, prior_sigma, log_C, estimate)
mixture.multilevel %>%
mutate(
prior_weight = c(0.25, 0.25, 0.25, 0.25), # change the weights here
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = `a[1]` - `a[2]`
) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = model.multilevel, aes(estimate, color = j)) +
stat_density(fill = "gray75", alpha = 0.8)
mixture.BEST %>%
mutate(
prior_weight = c(0.25, 0.25, 0.25, 0.25), # change the weights here
post_weight =  as.numeric(exp( log(prior_weight) + log_C - logSumExp(log(prior_weight) + log_C) )),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
mutate(
estimate = b
) %>%
sample_n(nrow(.)/max(.$j), weight = post_weight) %>%
ggplot(aes(x = estimate)) +
geom_density(data = estimates.BEST, aes(estimate, color = j)) +
stat_density(fill = "gray75", alpha = 0.8)
post_densities <- fitted_models %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
select(j, post_parameter) %>%
group_by(j) %>%
nest(post_parameter) %>%
mutate(
d = map(data, ~post_f(grid, .x[[post_parameter]]))
) %>%
unnest(d)
# this will only allow single parameter estimates
# cannot compute difference between two parameters
prior_post_model_densities <- function(fitted_models, grid, post_parameter){
prior_densities <- fitted_models %>%
mutate(
j = as.factor(j),
grid = list(grid)
) %>%
unnest(grid) %>%
mutate( prior_d = prior_f(grid, prior_mu, prior_sigma) )
post_densities <- fitted_models %>%
mutate(
j = as.factor(j),
posterior_estimates = map(fit, tidy_draws)
) %>%
unnest(posterior_estimates) %>%
select(j, post_parameter) %>%
group_by(j) %>%
nest(post_parameter) %>%
mutate(
d = map(data, ~post_f(grid, .x[[post_parameter]]))
) %>%
unnest(d)
return( left_join(prior_densities, post_densities) )
}
mixture.BEST %>%
prior_post_model_densities(xgrid, 'b')
xgrid <- seq(-40, 40, length.out = 2000)
mixture.BEST %>%
prior_post_model_densities(xgrid, 'b')
write.csv(mixture_densities, "prior_posterior_density_estimates.csv")
mixture_densities <- mixture.BEST %>%
prior_post_model_densities(xgrid, 'b')
write.csv(mixture_densities, "prior_posterior_density_estimates.csv")
# prior and posterior densities
mixture_densities %>%
ggplot() +
geom_line(aes(x = grid, y = post_d, color = j, group = j)) +
geom_line(aes(x = grid, y = prior_d, color = j, group = j), lty = 3) +
coord_cartesian(xlim = c(-20, 20))
